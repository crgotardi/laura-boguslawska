---
import IconButton from './IconButton.astro';

type DialogWidth = 'sm' | 'md' | 'lg' | 'full';

interface Props {
    id: string;
    maxWidth?: DialogWidth,
    fullScreen?: boolean,
    ariaDescribedby: string,
    onClose?: () => void,
}

const {
    id,
    maxWidth,
    fullScreen,
    ariaDescribedby,
    onClose,
} = Astro.props
---

<dialog
    id={id}
    aria-describedby={ariaDescribedby}
    class:list={[
        'dialog',
        'fixed',
        'top-10',
        'left-1/2',
        'p-4',
        'rounded-md',
        'shadow-lg',
        'overflow-auto',
        'z-20',
        'bg-paper-100',
        {
            'w-full': fullScreen,
            'w-5/6': maxWidth === "lg",
            'w-4/6': maxWidth === "md",
        }
    ]}
>
    <div id="dialog-container" class="p-5">
        <div class="dialog-header mb-5 flex items-start justify-between">
            <slot name="dialog-header"></slot>
            <IconButton 
                iconName="close"
                size="sm"
            />
        </div>
        <div class="dialog-body">
            <slot name="dialog-body"></slot>
        </div>
        <div class="dialog-footer">
            <slot name="dialog-footer"></slot> 
        </div>
    </div>
</dialog>

<style>
    .dialog {
        transform: translate(-50%, 0%);

        &[open] {
            animation: fade-in 0.3s ease-in-out;
        }
    }

    @keyframes fade-in {
        from {
            opacity: 0
        }

        to {
            opacity: 1
        }
    }
</style>

<script>
    let dialog: HTMLDialogElement | null;
    let closeButton: HTMLButtonElement | null;
    let btnListener: any;
    let keyListener: any;

    function init() {
        dialog = document.querySelector("dialog");
        closeButton = document.querySelector("dialog button");

        if (dialog && closeButton) {
            btnListener = closeButton?.addEventListener('click', () => {
                dialog?.close();
            });
        
            keyListener = document.addEventListener('keyup', (event: KeyboardEvent) => {
                if (event.key === 'Escape') {
                    dialog?.close();
                }
            })
        }
    }

    document.addEventListener('astro:before-swap', () => {
        closeButton?.removeEventListener('click', btnListener);
        document?.removeEventListener('keyup', keyListener);

        btnListener = null;
        keyListener = null;
    });

    document.addEventListener("astro:after-swap", init);
    init()
</script>